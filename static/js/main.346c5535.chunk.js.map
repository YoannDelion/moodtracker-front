{"version":3,"sources":["Assets/mood-icons/Angry.svg","Assets/mood-icons/Fear.svg","Assets/mood-icons/Happy.svg","Assets/mood-icons/Neutral.svg","Assets/mood-icons/Sad.svg","redux/slices/uiSlice.js","redux/slices/entriesSlice.js","redux/slices/authSlice.js","redux/slices/feelingsSlice.js","redux/reducer.js","redux/slices/userSlice.js","config.js","redux/services/feelingsService.js","redux/services/authServices.js","redux/store.js","redux/services/entriesService.js","redux/services/uiService.js","Components/AddDetailModal.js","Components/Pages/HomePage.js","Components/Pages/LoginPage.js","Components/Navbar.js","Components/Pages/SignupPage.js","Components/PrivateRoute.js","Components/AnonymRoute.js","utils/utilFunctions.js","redux/selectors/entriesSelector.js","Components/StyledBadge.js","Components/ShowEntryModal.js","Components/Calendar.js","Components/FeelingsStatsList.js","Components/Pages/StatsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","uiSlice","createSlice","name","initialState","isLoading","isModalOpen","reducers","loadingUi","state","stopLoadingUi","toggleModal","action","payload","actions","entries","currentEntry","selectedMonth","Date","entriesSlice","addNewEntry","push","fetchedAllEntries","emptyEntries","selectCurrentEntry","deleteCurrentEntryFromStore","filter","entry","entryId","selectMonth","addNote","entryIndex","findIndex","note","updateEntry","isLogged","token","authSlice","login","logout","feelingsSlice","primaryFeelings","fetchedPrimaryFeelings","combineReducers","auth","authReducer","ui","uiReducer","entriesReducer","feelings","feelingsReducer","userSlice","firstName","lastName","fetchedUserInfo","API_URL","getPrimaryFeelings","dispatch","a","axios","get","then","response","data","Promise","reject","logoutUser","defaults","headers","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","rootReducer","middleware","getDefaultMiddleware","serializableCheck","logger","store","configureStore","reducer","persistore","persistStore","getState","jwtDecode","exp","now","fetchAllEntries","toggleDetailModal","isOpen","connect","addEntryNote","post","icon","useState","setNote","Dialog","className","open","onClose","fullWidth","maxWidth","DialogTitle","id","src","alt","feeling","feelingName","moment","entryDate","format","DialogContent","CircularProgress","size","onSubmit","event","preventDefault","TextField","value","onChange","currentTarget","multiline","label","DialogActions","Button","type","color","onClick","postNewEntry","updating","find","feelingId","selectedDate","setSelectedDate","newEntry","setNewEntry","choosingMood","setChoosingMood","setUpdating","isToday","setIsToday","colors","angry","neutral","happy","sad","fear","changeBackgroundColor","document","getElementsByTagName","style","backgroundColor","changeSelectedEntry","useCallback","toISOString","split","selectedEntry","toLowerCase","useEffect","handleDateChange","date","isSame","handleButtonClick","Container","Typography","variant","align","IconButton","subtract","DatePicker","showTodayButton","autoOk","margin","disableFuture","keyboardbuttonprops","disabled","add","map","Moods","AddDetailModal","loginUser","credentials","history","FBIdToken","email","password","setCredentials","errors","setErrors","handleChange","handleSubmit","Grid","container","Happy","component","noValidate","helperText","error","InputProps","startAdornment","InputAdornment","position","general","Link","to","hasCurrentEntry","isHomePage","useRouteMatch","path","exact","AppBar","Toolbar","edge","Fab","aria-label","zIndex","top","left","right","confirmPassword","newUser","setNewUser","catch","getYearAndMonthFromISOStringDate","isoStringDate","getFullYear","getMonth","selectedMonthEntriesSelector","createSelector","StyledBadge","withStyles","badge","border","padding","Badge","DialogContentText","createdAt","Divider","updatedAt","setDate","displayEntry","setDisplayEntry","weekDayShortName","weekdaysShort","day","blanks","i","startOf","daysInMonth","d","monthDay","testDate","hasEntry","showEntryDetail","badgeContent","anchorOrigin","vertical","horizontal","totalSlots","rows","cells","forEach","row","length","FeelingsStatsList","setFeelings","sortFeelings","primaryFeeling","filtered","entriesCount","Math","round","selectMonthForStatistics","month","views","theme","createMuiTheme","palette","primary","main","App","ThemeProvider","loading","persistor","utils","MomentUtils","basename","process","HomePage","LoginPage","SignupPage","StatsPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.346c5535.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Angry.c094ca91.svg\";","module.exports = __webpack_public_path__ + \"static/media/Fear.d7c09086.svg\";","module.exports = __webpack_public_path__ + \"static/media/Happy.b1e5e777.svg\";","module.exports = __webpack_public_path__ + \"static/media/Neutral.6fa11d01.svg\";","module.exports = __webpack_public_path__ + \"static/media/Sad.b6957d1c.svg\";","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    isLoading: false,\n    isModalOpen: false\n}\n\nconst uiSlice = createSlice({\n    name: 'ui',\n    initialState,\n    reducers: {\n        loadingUi: state => { state.isLoading = true },\n        stopLoadingUi: state => { state.isLoading = false },\n        toggleModal: (state, action) => { state.isModalOpen = action.payload }\n    }\n})\n\nexport const { loadingUi, stopLoadingUi, toggleModal } = uiSlice.actions\n\nexport default uiSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    entries: [],\n    currentEntry: {},\n    selectedMonth: new Date()\n}\n\nconst entriesSlice = createSlice({\n    name: 'entries',\n    initialState,\n    reducers: {\n        addNewEntry: (state, action) => {\n            state.entries.push(action.payload)\n            state.currentEntry = action.payload\n        },\n        fetchedAllEntries: (state, action) => { state.entries = action.payload },\n        emptyEntries: state => initialState,\n        selectCurrentEntry: (state, action) => { state.currentEntry = action.payload },\n        deleteCurrentEntryFromStore: state => {\n            state.entries = state.entries.filter(entry => entry.entryId !== state.currentEntry.entryId)\n        },\n        selectMonth: (state, action) => { state.selectedMonth = action.payload },\n        addNote: (state, action) => {\n            const entryIndex = state.entries.findIndex(entry => entry.entryId === action.payload.entryId)\n            state.entries[entryIndex] = { ...state.entries[entryIndex], note: action.payload.note }\n            state.currentEntry = state.entries[entryIndex]\n        }\n    }\n})\n\nexport const {\n    addNewEntry, fetchedAllEntries, emptyEntries, selectCurrentEntry, updateEntry,\n    deleteCurrentEntryFromStore, selectMonth, addNote\n} = entriesSlice.actions\n\nexport default entriesSlice.reducer ","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    isLogged: false,\n    token: null\n}\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        login: (state, action) => {\n            state.isLogged = true\n            state.token = action.payload\n        },\n        logout: state => initialState\n    }\n})\n\nexport const { login, logout } = authSlice.actions\n\nexport default authSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    primaryFeelings: []\r\n}\r\n\r\nconst feelingsSlice = createSlice({\r\n    name: 'feelings',\r\n    initialState,\r\n    reducers: {\r\n        fetchedPrimaryFeelings: (state, action) => { state.primaryFeelings = action.payload }\r\n    }\r\n})\r\n\r\nexport const { fetchedPrimaryFeelings } = feelingsSlice.actions\r\n\r\nexport default feelingsSlice.reducer","import { combineReducers } from 'redux'\nimport authReducer from './slices/authSlice'\nimport uiReducer from './slices/uiSlice'\nimport entriesReducer from './slices/entriesSlice'\nimport feelingsReducer from './slices/feelingsSlice'\n\nexport default combineReducers({\n    auth: authReducer,\n    ui: uiReducer,\n    entries: entriesReducer,\n    feelings: feelingsReducer\n})","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    firstName: '',\n    lastName: ''\n}\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        fetchedUserInfo: (state, action) => {state = action.payload}\n    }\n})\n\nexport const { fetchedUserInfo } = userSlice.actions\n\nexport default userSlice.reducer","export const API_URL = 'https://europe-west3-mood-tracker-c5cbe.cloudfunctions.net/api'","import { loadingUi, stopLoadingUi } from '../slices/uiSlice'\r\nimport { fetchedPrimaryFeelings } from '../slices/feelingsSlice'\r\nimport axios from 'axios'\r\nimport { API_URL } from '../../config'\r\n\r\n/**\r\n * Fetch all primary feelings\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const getPrimaryFeelings = () => async dispatch => {\r\n    dispatch(loadingUi())\r\n\r\n    try {\r\n        const feelings = await axios.get(`${API_URL}/feelings/primary`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n        dispatch(fetchedPrimaryFeelings(feelings))\r\n        dispatch(stopLoadingUi())\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}","import axios from 'axios'\r\nimport { login, logout } from '../slices/authSlice'\r\nimport { loadingUi, stopLoadingUi } from '../slices/uiSlice'\r\nimport { fetchedUserInfo } from '../slices/userSlice'\r\nimport { emptyEntries } from '../slices/entriesSlice'\r\nimport { fetchAllEntries } from './entriesService'\r\nimport { getPrimaryFeelings } from './feelingsService'\r\nimport { API_URL } from '../../config'\r\n\r\n/**\r\n * Try to log in user and save axios headers\r\n * @param credentials\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const loginUser = (credentials, history) => async dispatch => {\r\n    dispatch(loadingUi())\r\n    try {\r\n        const data = await axios.post(`${API_URL}/login`, credentials)\r\n            .then(response => response.data)\r\n        const FBIdToken = `Bearer ${data.token}`\r\n\r\n        axios.defaults.headers['Authorization'] = FBIdToken\r\n        dispatch(login(FBIdToken))\r\n        dispatch(fetchAllEntries())\r\n        dispatch(getPrimaryFeelings())\r\n        history.push('/')\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Logout user and delete axios headers\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const logoutUser = () => dispatch => {\r\n    dispatch(emptyEntries())\r\n    dispatch(logout())\r\n    delete axios.defaults.headers['Authorization']\r\n}\r\n\r\nexport const fetchUserInfo = uid => dipatch => {\r\n    axios.get(`${API_URL}/user/${uid}`)\r\n        .then(response => dipatch(fetchedUserInfo(response.data)))\r\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { logger } from 'redux-logger'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport rootReducer from './reducer'\r\nimport jwtDecode from 'jwt-decode'\r\nimport axios from 'axios'\r\nimport { fetchAllEntries } from './services/entriesService'\r\nimport { logoutUser } from './services/authServices'\r\nimport { getPrimaryFeelings } from './services/feelingsService'\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    blacklist: ['ui']\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: false,\r\n    }),\r\n    logger\r\n]\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware\r\n})\r\n\r\nconst persistore = persistStore(store, null, () => {\r\n    const token = store.getState().auth.token\r\n    if (token) {\r\n        const decodedToken = jwtDecode(token)\r\n        if (decodedToken.exp * 1000 < Date.now()) {\r\n            store.dispatch(logoutUser())\r\n        } else {\r\n            axios.defaults.headers['Authorization'] = token\r\n            store.dispatch(fetchAllEntries())\r\n            store.dispatch(getPrimaryFeelings())\r\n        }\r\n    }\r\n})\r\n\r\nexport default store\r\nexport { persistore }\r\n\r\n","import { loadingUi, stopLoadingUi } from '../slices/uiSlice'\r\nimport { addNewEntry, deleteCurrentEntryFromStore, selectMonth, addNote } from '../slices/entriesSlice'\r\nimport axios from 'axios'\r\nimport { fetchedAllEntries } from '../slices/entriesSlice'\r\nimport store from '../store'\r\nimport { API_URL } from '../../config'\r\n\r\n/**\r\n * Post a new entry\r\n * @param entry\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const postNewEntry = (entry, updating) => async dispatch => {\r\n    dispatch(loadingUi())\r\n    try {\r\n        await axios.post(`${API_URL}/entry`, entry)\r\n            .then(response => response.data)\r\n\r\n        //todo: refacto\r\n        const feeling = store.getState().feelings.primaryFeelings.find(feeling => feeling.feelingId === entry.feelingId)\r\n        entry.feeling = feeling\r\n\r\n        if (updating) dispatch(deleteCurrentEntryFromStore())\r\n\r\n        dispatch(addNewEntry(entry))\r\n        dispatch(stopLoadingUi())\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Fetch all entries of the user\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const fetchAllEntries = () => async dispatch => {\r\n    dispatch(loadingUi())\r\n    try {\r\n        const entries = await axios.get(`${API_URL}/entries`)\r\n            .then(response => response.data)\r\n        dispatch(fetchedAllEntries(entries))\r\n        dispatch(stopLoadingUi())\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Add or update the note of a given Entry \r\n */\r\nexport const addEntryNote = entry => async dispatch => {\r\n    dispatch(loadingUi())\r\n    try {\r\n        await axios.post(`${API_URL}/entry/${entry.entryId}/details`, entry)\r\n            .then(() => {\r\n                dispatch(addNote({\r\n                    entryId: entry.entryId,\r\n                    note: entry.note\r\n                }))\r\n                dispatch(stopLoadingUi())\r\n            })\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Select month to filter entries for statistics\r\n */\r\nexport const selectMonthForStatistics = month => dispatch => dispatch(selectMonth(month))","import { toggleModal } from '../slices/uiSlice'\r\n\r\n/**\r\n * Toggle Modal Opening\r\n */\r\nexport const toggleDetailModal = isOpen => async dispatch => {\r\n    dispatch(toggleModal(isOpen))\r\n}","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { toggleDetailModal } from '../redux/services/uiService'\r\nimport moment from 'moment'\r\nimport { addEntryNote } from '../redux/services/entriesService'\r\n// MUI\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nconst DetailModal = ({ icon, isModalOpen, currentEntry, toggleDetailModal, isLoading, addEntryNote }) => {\r\n\r\n    const [note, setNote] = useState(currentEntry.note)\r\n\r\n    const handleChange = ({ currentTarget }) => setNote(currentTarget.value)\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault()\r\n\r\n        currentEntry = {\r\n            ...currentEntry,\r\n            note\r\n        }\r\n        addEntryNote(currentEntry)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setNote('')\r\n        toggleDetailModal(!isModalOpen)\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            className='detail-modal'\r\n            open={isModalOpen}\r\n            onClose={() => toggleDetailModal(!isModalOpen)}\r\n            fullWidth\r\n            maxWidth='sm'>\r\n            <DialogTitle className='detail-modal--title' id='form-dialog-title'>\r\n                <img src={icon} alt={currentEntry.feeling.feelingName} />\r\n                <div>Add a note to your mood</div>\r\n                <div>{moment(currentEntry.entryDate).format('MMMM Do YYYY')}</div>\r\n            </DialogTitle>\r\n            {!isLoading ? <form onSubmit={handleSubmit}>\r\n                <DialogContent>\r\n                    <TextField\r\n                        value={note}\r\n                        onChange={handleChange}\r\n                        multiline fullWidth label='What happened today?' />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button type='submit' color='primary'>\r\n                        Add note\r\n                    </Button>\r\n                    <Button onClick={handleCancel} color='primary'>\r\n                        Cancel\r\n                </Button>\r\n                </DialogActions>\r\n            </form>\r\n                : <DialogContent className='detail-modal--progress'>\r\n                    <CircularProgress size={50} />\r\n                </DialogContent>\r\n            }\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: state.ui.isLoading,\r\n    isModalOpen: state.ui.isModalOpen,\r\n    currentEntry: state.entries.currentEntry\r\n})\r\n\r\nexport default connect(mapStateToProps, { toggleDetailModal, addEntryNote })(DetailModal)\r\n","import React, { useEffect, useState, useCallback } from 'react'\r\nimport { postNewEntry } from '../../redux/services/entriesService'\r\nimport { connect } from 'react-redux'\r\nimport { selectCurrentEntry } from '../../redux/slices/entriesSlice'\r\nimport moment from 'moment'\r\nimport AddDetailModal from '../AddDetailModal'\r\n// Material UI\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { DatePicker } from '@material-ui/pickers'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n\r\nimport * as Moods from '../../Assets/mood-icons'\r\n\r\n\r\nconst HomePage = ({ isLoading, postNewEntry, primaryFeelings, entries, selectCurrentEntry, currentEntry, isModalOpen, toggleDetailModal }) => {\r\n\r\n    const [selectedDate, setSelectedDate] = useState(moment())\r\n    const [newEntry, setNewEntry] = useState({ feelingId: '', entryDate: '' })\r\n    const [choosingMood, setChoosingMood] = useState(true)\r\n    const [updating, setUpdating] = useState(false)\r\n    const [isToday, setIsToday] = useState(true)\r\n\r\n    const colors = {\r\n        angry: '#FF595E',\r\n        neutral: '#8AC926',\r\n        happy: '#FFCA3A',\r\n        sad: '#1982C4',\r\n        fear: '#6A4C93'\r\n    }\r\n\r\n    const changeBackgroundColor = color => {\r\n        document.getElementsByTagName('html')[0].style.backgroundColor = color\r\n    }\r\n\r\n    const changeSelectedEntry = useCallback(() => {\r\n        const entryDate = selectedDate.toISOString().split('T')[0]\r\n        const selectedEntry = entries.find(entry => entry.entryDate.split('T')[0] === entryDate)\r\n        selectedEntry ? setChoosingMood(false) : setChoosingMood(true)\r\n        selectCurrentEntry(selectedEntry)\r\n        setUpdating(false)\r\n        selectedEntry && changeBackgroundColor(colors[selectedEntry.feeling.feelingName.toLowerCase()])\r\n    }, [entries, selectCurrentEntry, selectedDate])\r\n\r\n    useEffect(() => {\r\n        changeSelectedEntry()\r\n        return () => {\r\n            changeBackgroundColor('#fff')\r\n        }\r\n    }, [selectedDate, changeSelectedEntry])\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date)\r\n        setIsToday(date.isSame(moment(), 'day'))\r\n    }\r\n\r\n    const handleButtonClick = ({ currentTarget }) => {\r\n        // Not using setState because it's not immediate so it doesn't send the correct data\r\n        newEntry.feelingId = currentTarget.value\r\n        newEntry.entryDate = selectedDate.toISOString()\r\n\r\n        postNewEntry(newEntry, updating)\r\n        setNewEntry({ feelingId: '', entryDate: '' })\r\n    }\r\n\r\n    const handleUpdateButtonClick = () => {\r\n        setUpdating(!updating)\r\n        changeBackgroundColor('#fff')\r\n        !updating ? changeBackgroundColor('#fff') : changeBackgroundColor(colors[currentEntry.feeling.feelingName.toLowerCase()])\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth='sm' className='mui-container'>\r\n\r\n            <div className='homepage--header'>\r\n                <Typography variant={'body1'} align='center'>{isToday ? 'How are you feeling today?' : 'How were you feeling?'}</Typography>\r\n                <div className=\"monthPicker\">\r\n                    <IconButton onClick={() => handleDateChange(moment(selectedDate).subtract(1, 'day'))}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                    <DatePicker\r\n                        showTodayButton\r\n                        autoOk\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-dialog\"\r\n                        format=\"MM/DD/yyyy\"\r\n                        disableFuture\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        keyboardbuttonprops={{\r\n                            'aria-label': 'change mood date',\r\n                        }}\r\n                    />\r\n                    <IconButton disabled={isToday} onClick={() => handleDateChange(moment(selectedDate).add(1, 'days'))}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='moods-button-container'>\r\n                {!isLoading ? <div>\r\n                    {choosingMood || updating ? (primaryFeelings ? primaryFeelings.map(feeling => <div className='mood-container' key={feeling.feelingId}>\r\n                        <img src={Moods[feeling.feelingName]} alt={feeling.feelingName}\r\n                            className={`mood-container__icon moods--${feeling.feelingName}`} />\r\n                        <Button\r\n                            onClick={handleButtonClick}\r\n                            key={feeling.feelingId}\r\n                            value={feeling.feelingId}\r\n                            variant='contained'\r\n                            color='primary'>\r\n                            {feeling.feelingName}\r\n                        </Button>\r\n                    </div>)\r\n                        : <CircularProgress />)\r\n                        : <div className={`display-mood mood--${currentEntry.feeling.feelingName}`}>\r\n                            <img src={Moods[currentEntry.feeling.feelingName]} alt={currentEntry.feeling.feelingName}\r\n                                className={`display-mood__icon moods--darkgrey`} />\r\n                            <Typography>{currentEntry.feeling.feelingName}</Typography>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                    : <CircularProgress />\r\n                }\r\n            </div>\r\n            <div className=\"homepage--footer\">\r\n                {!choosingMood && <IconButton onClick={handleUpdateButtonClick}>\r\n                    {updating ? <ClearIcon /> : <CreateIcon />}\r\n                </IconButton>}\r\n            </div>\r\n\r\n            {currentEntry && currentEntry.feeling && <AddDetailModal icon={Moods[currentEntry.feeling.feelingName]} />}\r\n        </Container >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: state.ui.isLoading,\r\n    primaryFeelings: state.feelings.primaryFeelings,\r\n    currentEntry: state.entries.currentEntry,\r\n    entries: state.entries.entries\r\n})\r\n\r\nexport default connect(mapStateToProps, { postNewEntry, selectCurrentEntry })(HomePage)","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { loginUser } from '../../redux/services/authServices'\nimport { Happy } from '../../Assets/mood-icons/index'\n//Material UI\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport DraftsIcon from '@material-ui/icons/Drafts'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport LockIcon from '@material-ui/icons/Lock'\n\nconst LoginPage = ({ history, loginUser, isLoading }) => {\n\n    const [credentials, setCredentials] = useState({ email: '', password: '' })\n    const [errors, setErrors] = useState({})\n\n    const handleChange = ({ currentTarget }) => {\n        const { name, value } = currentTarget\n        setCredentials({ ...credentials, [name]: value })\n    }\n    const handleSubmit = async event => {\n        event.preventDefault()\n\n        try {\n            await loginUser(credentials, history)\n        } catch (e) {\n            setErrors(e.response.data)\n        }\n    }\n\n    return (\n        <Grid container >\n            <div className='formContainer'>\n                <img src={Happy} alt='Happy face' />\n                <Typography variant='h4' component='h1'>Welcome back!</Typography>\n\n                <form className='form' onSubmit={handleSubmit} noValidate>\n                    <TextField id=\"email\" name='email' label=\"Email\" type='email' onChange={handleChange}\n                        value={credentials.email} fullWidth className='textField'\n                        helperText={errors.email} error={!!errors.email}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <DraftsIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"password\" name='password' label=\"Password\" type='password' onChange={handleChange}\n                        value={credentials.password} fullWidth className='textField'\n                        helperText={errors.password} error={!!errors.password}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <LockIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {errors.general &&\n                        <Typography variant='body2' className='customError'>{errors.general}</Typography>}\n                    <Button type='submit' variant=\"contained\" color=\"primary\" className='button'\n                        disabled={isLoading}>\n                        Login\n                      {isLoading && <CircularProgress size={30} className='progress' />}\n                    </Button>\n                </form>\n                <Button className='button' component={Link} to={'/signup'} variant='text'>Don't have an account ? Sign up here</Button>\n            </div>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isLoading: state.ui.isLoading\n})\n\nexport default connect(mapStateToProps, { loginUser })(LoginPage)","import React from 'react'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logoutUser } from '../redux/services/authServices'\r\nimport { toggleDetailModal } from '../redux/services/uiService'\r\n// Material UI\r\nimport ExitToApp from '@material-ui/icons/ExitToApp'\r\nimport BarChartIcon from '@material-ui/icons/BarChart'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport MoodIcon from '@material-ui/icons/Mood'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nconst Navbar = ({ isLogged, logoutUser, hasCurrentEntry, isModalOpen, toggleDetailModal }) => {\r\n\r\n    const handleLogout = () => logoutUser()\r\n\r\n    const isHomePage = useRouteMatch({\r\n        path: '/',\r\n        exact: true\r\n    })\r\n\r\n    return (\r\n        isLogged && <AppBar position=\"fixed\" className='navbar' color='default'>\r\n            <Toolbar className='toolbar'>\r\n                <IconButton edge='start' component={Link} to='/statistics'>\r\n                    <BarChartIcon />\r\n                </IconButton>\r\n                <Fab aria-label=\"add\" color='primary' style={{\r\n                    position: 'absolute',\r\n                    zIndex: 1,\r\n                    top: -30,\r\n                    left: 0,\r\n                    right: 0,\r\n                    margin: '0 auto',\r\n                }} component={Link} to='/'>\r\n                    {isHomePage && hasCurrentEntry ? <AddIcon style={{ color: 'white' }} onClick={() => toggleDetailModal(!isModalOpen)} /> : <MoodIcon style={{ color: 'white' }} />}\r\n                </Fab>\r\n                <IconButton onClick={handleLogout}>\r\n                    <ExitToApp />\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLogged: state.auth.isLogged,\r\n    hasCurrentEntry: state.entries.currentEntry,\r\n    isModalOpen: state.ui.isModalOpen\r\n})\r\n\r\nexport default connect(mapStateToProps, { logoutUser, toggleDetailModal })(Navbar)","import React, { useState } from 'react'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { loadingUi, stopLoadingUi } from '../../redux/slices/uiSlice'\nimport { Link } from 'react-router-dom'\nimport { Happy } from '../../Assets/mood-icons/index'\nimport { API_URL } from '../../config'\n\n//Material UI\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\nimport DraftsIcon from '@material-ui/icons/Drafts'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport LockIcon from '@material-ui/icons/Lock'\n\nconst SignupPage = ({ history, isLoading, dispatch }) => {\n\n    const [errors, setErrors] = useState({})\n    const [newUser, setNewUser] = useState({ email: '', password: '', confirmPassword: '', firstName: '' })\n\n    const handleChange = ({ currentTarget }) => {\n        const { name, value } = currentTarget\n        setNewUser({ ...newUser, [name]: value })\n    }\n    const handleSubmit = event => {\n        event.preventDefault()\n        dispatch(loadingUi())\n\n        axios.post(`${API_URL}/signup`, newUser)\n            .then(response => {\n                dispatch(stopLoadingUi())\n                history.push('/login')\n            })\n            .catch(errors => {\n                setNewUser({ ...newUser, password: '', confirmPassword: '' })\n                setErrors(errors.response.data)\n                dispatch(stopLoadingUi())\n            })\n    }\n\n    return (\n        <Grid container maxWidth='sm'>\n            <div className='formContainer'>\n\n                <img src={Happy} alt='Happy Face' />\n                <Typography variant='h4' component='h1'>Welcome! Sign up here</Typography>\n\n                <form className='form' onSubmit={handleSubmit} noValidate>\n                    <TextField id=\"email\" name='email' label=\"Email\" type='email' onChange={handleChange}\n                        value={newUser.email} fullWidth className='textField'\n                        helperText={errors.email} error={!!errors.email}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <DraftsIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"firstName\" name='firstName' label=\"First name\" type='text' onChange={handleChange}\n                        value={newUser.firstName} fullWidth className='textField'\n                        helperText={errors.firstName} error={!!errors.firstName}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <AccountCircleIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"password\" name='password' label=\"Password\" type='password' onChange={handleChange}\n                        value={newUser.password} fullWidth className='textField'\n                        helperText={errors.password} error={!!errors.password}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <LockIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"confirmPassword\" name='confirmPassword' label=\"Confirm Password\" type='password'\n                        onChange={handleChange}\n                        value={newUser.confirmPassword} fullWidth className='textField'\n                        helperText={errors.confirmPassword} error={!!errors.confirmPassword}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <LockIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {errors.general &&\n                        <Typography variant='body2' className='customError'>{errors.general}</Typography>}\n                    <Button type='submit' variant=\"contained\" color=\"primary\" className='button'\n                        disabled={isLoading}>\n                        Signup\n                      {isLoading && <CircularProgress size={30} className='progress' />}\n                    </Button>\n                </form>\n                <Button className='button' component={Link} to={'/login'} variant='text'>Already have an account ? Log in here</Button>\n            </div>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isLoading: state.ui.isLoading\n})\n\nexport default connect(mapStateToProps, null)(SignupPage)","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nconst PrivateRoute = ({ isLogged, path, component }) => isLogged ? <Route path={path} component={component}/> :\n  <Redirect to={'/login'}/>\n\nconst mapStateToProps = state => ({\n    isLogged: state.auth.isLogged\n})\n\nexport default connect(mapStateToProps)(PrivateRoute)","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nconst AnonymRoute = ({ isLogged, path, component }) => !isLogged ? <Route path={path} component={component}/> :\n  <Redirect to={'/'}/>\n\nconst mapStateToProps = state => ({\n    isLogged: state.auth.isLogged\n})\n\nexport default connect(mapStateToProps)(AnonymRoute)","export const getYearAndMonthFromISOStringDate = isoStringDate => {\r\n    const date = new Date(isoStringDate)\r\n    return `${date.getFullYear()}-${date.getMonth()}`\r\n}","import { createSelector } from '@reduxjs/toolkit'\r\nimport { getYearAndMonthFromISOStringDate } from '../../utils/utilFunctions'\r\n\r\nconst entriesSelector = state => state.entries.entries\r\nconst selectedMonth = state => getYearAndMonthFromISOStringDate(state.entries.selectedMonth)\r\n\r\nexport const selectedMonthEntriesSelector = createSelector(\r\n    [entriesSelector, selectedMonth],\r\n    (entries, selectedMonth) => entries.filter(entry => getYearAndMonthFromISOStringDate(entry.entryDate) === selectedMonth)\r\n)\r\n\r\n","import Badge from '@material-ui/core/Badge'\r\nimport { withStyles } from '@material-ui/core/styles'\r\n\r\nconst StyledBadge = withStyles(() => ({\r\n    badge: {\r\n        right: 5,\r\n        top: 10,\r\n        border: `2px solid`,\r\n        padding: '0 4px'\r\n    },\r\n}))(Badge)\r\n\r\nexport default StyledBadge","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { toggleDetailModal } from '../redux/services/uiService'\r\nimport moment from 'moment'\r\n// MUI\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nconst ShowEntryModal = ({ entry, isLoading, isModalOpen, toggleDetailModal }) => {\r\n    return (\r\n        <Dialog\r\n            className='detail-modal'\r\n            open={isModalOpen}\r\n            onClose={() => toggleDetailModal(!isModalOpen)}\r\n            fullWidth\r\n            maxWidth='sm'>\r\n            <DialogTitle id=\"max-width-dialog-title\">{moment(entry.entryDate).format('MMMM Do YYYY')}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    <p>Created at:</p>\r\n                    <p>{moment(entry.createdAt).format('MMMM Do YYYY h:mm:ss')}</p>\r\n                </DialogContentText>\r\n                <Divider />\r\n                {entry.updatedAt && <>\r\n                    <DialogContentText>\r\n                        <p>Last updated at:</p>\r\n                        <p>{moment(entry.updatedAt).format('MMMM Do YYYY h:mm:ss')}</p>\r\n                    </DialogContentText>\r\n                    <Divider />\r\n                </>}\r\n                <DialogContentText>\r\n                    <p>Note:</p>\r\n                    <p>{entry.note ? entry.note : <i>You can add notes in the homepage</i>}</p>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => toggleDetailModal(!isModalOpen)} color=\"primary\">Close</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: state.ui.isLoading,\r\n    isModalOpen: state.ui.isModalOpen\r\n})\r\n\r\nexport default connect(mapStateToProps, { toggleDetailModal })(ShowEntryModal)\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport 'tail.datetime/css/tail.datetime-default-blue.css'\r\nimport StyledBadge from './StyledBadge'\r\nimport { toggleDetailModal } from '../redux/services/uiService'\r\n\r\nimport * as Moods from '../Assets/mood-icons'\r\nimport { IconButton } from '@material-ui/core'\r\nimport ShowEntryModal from './ShowEntryModal'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Calendar = ({ selectedMonth, entries, isModalOpen, toggleDetailModal }) => {\r\n\r\n    const [date, setDate] = useState(new Date(selectedMonth))\r\n    const [displayEntry, setDisplayEntry] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setDate(selectedMonth)\r\n    }, [selectedMonth])\r\n\r\n    const showEntryDetail = entry => {\r\n        toggleDetailModal(!isModalOpen)\r\n        setDisplayEntry(entry)\r\n    }\r\n\r\n    // Check if a day has an existing entry\r\n    const hasEntry = monthDay => {\r\n        let testDate = new Date(date)\r\n        testDate.setDate(monthDay)\r\n        testDate = testDate.toISOString().split('T')[0]\r\n        return entries.find(entry => entry.entryDate.split('T')[0] === testDate)\r\n    }\r\n\r\n    // Return an array with the short name of weekdays\r\n    const weekDayShort = moment.weekdaysShort()\r\n\r\n    // Creates the header of the calendar\r\n    const weekDayShortName = weekDayShort.map(day => <th key={day} className='week-day'>{day}</th>)\r\n\r\n    // Return first day of the month \r\n    const firstDayOfMonth = () => moment(date).startOf(\"month\").format(\"d\")\r\n\r\n    // Creates blanks at the start of the calendar to match the first day of the month \r\n    const blanks = []\r\n    for (let i = 0; i < firstDayOfMonth(); i++) {\r\n        blanks.push(<td key={`empty-${i}`} className='calendar-day empty'>{''}</td>)\r\n    }\r\n\r\n    // Creates the array with the days of the month\r\n    let daysInMonth = []\r\n    for (let d = 1; d <= moment(date).daysInMonth(); d++) {\r\n        let entry = hasEntry(d)\r\n\r\n        daysInMonth.push(\r\n            <td key={d} className='calendar-day'>\r\n                {entry ? <IconButton size='small' onClick={() => showEntryDetail(entry)}>\r\n                    {entry.note ? (\r\n                        <StyledBadge badgeContent='+' color='primary' anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\r\n                            <img src={Moods[entry.feeling.feelingName]} alt={entry.feeling.feelingName} className={`calendar-mood moods--${entry.feeling.feelingName}`} />\r\n                        </StyledBadge>\r\n                    )\r\n                        : <img src={Moods[entry.feeling.feelingName]} alt={entry.feeling.feelingName} className={`calendar-mood moods--${entry.feeling.feelingName}`} />}\r\n                </IconButton>\r\n                    : d\r\n                }\r\n            </td>\r\n        )\r\n    }\r\n\r\n    // Creates the needed amount of rows in the calendar\r\n    const totalSlots = [...blanks, ...daysInMonth]\r\n    const rows = []\r\n    let cells = []\r\n    totalSlots.forEach((row, i) => {\r\n        if (i % 7 !== 0) {\r\n            cells.push(row) // if index not equal 7 that means not go to next week\r\n        } else {\r\n            rows.push(cells) // when reach next week we contain all td in last week to rows \r\n            cells = [] // empty container \r\n            cells.push(row) // in current loop we still push current row to new container\r\n        }\r\n        if (i === totalSlots.length - 1) { // when end loop we add remain date\r\n            rows.push(cells)\r\n        }\r\n    })\r\n\r\n    // Finally creates the body of the calendar\r\n    daysInMonth = rows.map((d, i) => <tr key={i}>{d}</tr>)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <table className='calendar'>\r\n                    <thead>\r\n                        <tr>\r\n                            {weekDayShortName}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>{daysInMonth}</tbody>\r\n                </table>\r\n            </div>\r\n            {displayEntry && <ShowEntryModal entry={displayEntry} />}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isModalOpen: state.ui.isModalOpen\r\n})\r\n\r\nexport default connect(mapStateToProps, { toggleDetailModal })(Calendar)\r\n","import React, { useEffect, useState, useCallback } from 'react'\r\nimport * as Moods from '../Assets/mood-icons'\r\n\r\nconst FeelingsStatsList = ({ primaryFeelings, entries }) => {\r\n\r\n    const [feelings, setFeelings] = useState([])\r\n\r\n    // Count the number of entries for each feeling\r\n    const sortFeelings = useCallback(entries => {\r\n        const feelings = []\r\n        primaryFeelings.forEach(primaryFeeling => {\r\n            let filtered = entries.filter(entry => entry.feeling.feelingId === primaryFeeling.feelingId)\r\n            feelings.push({\r\n                ...primaryFeeling,\r\n                entriesCount: filtered.length\r\n            })\r\n        })\r\n        setFeelings(feelings)\r\n    }, [primaryFeelings])\r\n\r\n    useEffect(() => {\r\n        sortFeelings(entries)\r\n    }, [sortFeelings, entries])\r\n\r\n    return (\r\n        <div className=\"card feelings-list\">\r\n            {feelings.map(feeling => (\r\n                <div className='feelings-list__element' key={feeling.feelingId}>\r\n                    <img src={Moods[feeling.feelingName]} alt={feeling.feelingName}\r\n                        className={`list-mood moods--${feeling.feelingName}`} />\r\n                    <span>{feeling.entriesCount}</span>\r\n                    <span>{Math.round(feeling.entriesCount / entries.length * 100)}%</span>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FeelingsStatsList\r\n","import React from 'react'\r\nimport { DatePicker } from \"@material-ui/pickers\"\r\nimport { connect } from 'react-redux'\r\nimport { selectMonthForStatistics } from '../../redux/services/entriesService'\r\nimport { selectedMonthEntriesSelector } from '../../redux/selectors/entriesSelector'\r\nimport Calendar from '../Calendar'\r\nimport moment from 'moment'\r\n// MUI\r\nimport Container from '@material-ui/core/Container'\r\nimport FeelingsStatsList from '../FeelingsStatsList'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n\r\nconst StatsPage = ({ selectMonthForStatistics, selectedMonth, entries, primaryFeelings }) => {\r\n\r\n    const handleDateChange = date => selectMonthForStatistics(date)\r\n\r\n    return (\r\n        <Container maxWidth='sm' className='statspage'>\r\n            <div className='monthPicker'>\r\n                <IconButton onClick={() => handleDateChange(moment(selectedMonth).subtract(1, 'month'))}>\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n                <DatePicker\r\n                    autoOk\r\n                    views={[\"month\"]}\r\n                    value={selectedMonth}\r\n                    onChange={handleDateChange}\r\n                    disableFuture\r\n                    format=\"MMMM\"\r\n                />\r\n                <DatePicker\r\n                    autoOk\r\n                    variant=\"inline\"\r\n                    views={[\"year\"]}\r\n                    value={selectedMonth}\r\n                    onChange={handleDateChange}\r\n                    disableFuture\r\n                />\r\n                <IconButton disabled={moment(selectedMonth).isSame(moment(), 'month')} onClick={() => handleDateChange(moment(selectedMonth).add(1, 'month'))}>\r\n                    <ChevronRightIcon />\r\n                </IconButton>\r\n            </div>\r\n            <div className=\"statspage--values\">\r\n                <Calendar selectedMonth={new Date(selectedMonth)} entries={entries} />\r\n                <FeelingsStatsList primaryFeelings={primaryFeelings} entries={entries} />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedMonth: state.entries.selectedMonth,\r\n    entries: selectedMonthEntriesSelector(state),\r\n    primaryFeelings: state.feelings.primaryFeelings\r\n})\r\n\r\nexport default connect(mapStateToProps, { selectMonthForStatistics })(StatsPage)\r\n","import React from 'react'\r\nimport './Assets/SCSS/index.scss'\r\nimport { BrowserRouter as Router, Switch } from 'react-router-dom'\r\nimport HomePage from './Components/Pages/HomePage'\r\nimport LoginPage from './Components/Pages/LoginPage'\r\nimport Navbar from './Components/Navbar'\r\nimport SignupPage from './Components/Pages/SignupPage'\r\nimport PrivateRoute from './Components/PrivateRoute'\r\nimport AnonymRoute from './Components/AnonymRoute'\r\nimport { persistore } from './redux/store'\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport StatsPage from './Components/Pages/StatsPage'\r\nimport MomentUtils from '@date-io/moment'\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#0096c7'\r\n        }\r\n    }\r\n})\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <PersistGate loading={null} persistor={persistore}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <div className=\"App\">\r\n                            <Router basename={`${process.env.PUBLIC_URL}/`}>\r\n                                <div className=\"container\">\r\n                                    <Switch>\r\n                                        <PrivateRoute exact path={'/'} component={HomePage} />\r\n                                        <AnonymRoute exact path={'/login'} component={LoginPage} />\r\n                                        <AnonymRoute exact path={'/signup'} component={SignupPage} />\r\n                                        <PrivateRoute exact path={'/statistics'} component={StatsPage} />\r\n                                    </Switch>\r\n                                </div>\r\n                                <Navbar />\r\n                            </Router>\r\n                        </div>\r\n                    </MuiPickersUtilsProvider>\r\n                </PersistGate>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}