{"version":3,"sources":["Assets/mood-icons/Angry.svg","Assets/mood-icons/Fear.svg","Assets/mood-icons/Happy.svg","Assets/mood-icons/Neutral.svg","Assets/mood-icons/Sad.svg","redux/slices/uiSlice.js","redux/slices/entriesSlice.js","redux/slices/authSlice.js","redux/slices/feelingsSlice.js","redux/reducer.js","redux/slices/userSlice.js","redux/services/feelingsService.js","redux/services/authServices.js","redux/store.js","redux/services/entriesService.js","Components/Pages/HomePage.js","Components/Pages/LoginPage.js","Components/Navbar.js","Components/Pages/SignupPage.js","Components/PrivateRoute.js","Components/AnonymRoute.js","utils/utilFunctions.js","redux/selectors/entriesSelector.js","Components/Calendar.js","Components/FeelingsStatsList.js","Components/Pages/StatsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","uiSlice","createSlice","name","initialState","isLoading","reducers","loadingUi","state","stopLoadingUi","actions","entries","currentEntry","selectedMonth","Date","entriesSlice","addNewEntry","action","push","payload","fetchedAllEntries","emptyEntries","selectCurrentEntry","deleteCurrentEntryFromStore","filter","entry","entryId","selectMonth","updateEntry","isLogged","token","authSlice","login","logout","feelingsSlice","primaryFeelings","fetchedPrimaryFeelings","combineReducers","auth","authReducer","ui","uiReducer","entriesReducer","feelings","feelingsReducer","userSlice","firstName","lastName","fetchedUserInfo","getPrimaryFeelings","dispatch","a","axios","get","then","response","data","Promise","reject","logoutUser","defaults","headers","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","middleware","getDefaultMiddleware","serializableCheck","logger","store","configureStore","reducer","persistore","persistStore","getState","jwtDecode","exp","now","fetchAllEntries","connect","postNewEntry","updating","post","feeling","find","feelingId","useState","moment","selectedDate","setSelectedDate","entryDate","newEntry","setNewEntry","choosingMood","setChoosingMood","setUpdating","isToday","setIsToday","colors","angry","neutral","happy","sad","fear","changeBackgroundColor","color","document","getElementsByTagName","style","backgroundColor","changeSelectedEntry","useCallback","toISOString","split","selectedEntry","feelingName","toLowerCase","useEffect","handleDateChange","date","isSame","handleButtonClick","currentTarget","value","Container","maxWidth","className","Typography","variant","align","IconButton","onClick","subtract","DatePicker","showTodayButton","autoOk","margin","id","format","disableFuture","onChange","KeyboardButtonProps","disabled","add","CircularProgress","map","src","Moods","alt","Button","loginUser","credentials","history","FBIdToken","email","password","setCredentials","errors","setErrors","handleChange","handleSubmit","event","preventDefault","Grid","container","Happy","component","onSubmit","noValidate","TextField","label","type","fullWidth","helperText","error","InputProps","startAdornment","InputAdornment","position","general","size","Link","to","hasCurrentEntry","isHomePage","useRouteMatch","path","exact","AppBar","Toolbar","edge","Fab","aria-label","zIndex","top","left","right","confirmPassword","newUser","setNewUser","catch","getYearAndMonthFromISOStringDate","isoStringDate","getFullYear","getMonth","selectedMonthEntriesSelector","createSelector","Calendar","setDate","hasEntry","monthDay","testDate","weekDayShortName","weekdaysShort","day","blanks","i","startOf","daysInMonth","d","totalSlots","rows","cells","forEach","row","length","FeelingsStatsList","setFeelings","sortFeelings","primaryFeeling","filtered","entriesCount","Math","round","selectMonthForStatistics","month","views","theme","createMuiTheme","palette","primary","main","App","ThemeProvider","loading","persistor","utils","MomentUtils","HomePage","LoginPage","SignupPage","StatsPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.327b199e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Angry.c094ca91.svg\";","module.exports = __webpack_public_path__ + \"static/media/Fear.d7c09086.svg\";","module.exports = __webpack_public_path__ + \"static/media/Happy.b1e5e777.svg\";","module.exports = __webpack_public_path__ + \"static/media/Neutral.6fa11d01.svg\";","module.exports = __webpack_public_path__ + \"static/media/Sad.b6957d1c.svg\";","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    isLoading: false\n}\n\nconst uiSlice = createSlice({\n    name: 'ui',\n    initialState,\n    reducers: {\n        loadingUi: state => { state.isLoading = true },\n        stopLoadingUi: state => { state.isLoading = false }\n    }\n})\n\nexport const { loadingUi, stopLoadingUi } = uiSlice.actions\n\nexport default uiSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    entries: [],\n    currentEntry: {},\n    selectedMonth: new Date()\n}\n\nconst entriesSlice = createSlice({\n    name: 'entries',\n    initialState,\n    reducers: {\n        addNewEntry: (state, action) => {\n            state.entries.push(action.payload)\n            state.currentEntry = action.payload\n        },\n        fetchedAllEntries: (state, action) => { state.entries = action.payload },\n        emptyEntries: state => initialState,\n        selectCurrentEntry: (state, action) => { state.currentEntry = action.payload },\n        deleteCurrentEntryFromStore: state => {\n            state.entries = state.entries.filter(entry => entry.entryId !== state.currentEntry.entryId)\n        },\n        selectMonth: (state, action) => { state.selectedMonth = action.payload }\n    }\n})\n\nexport const { addNewEntry, fetchedAllEntries, emptyEntries, selectCurrentEntry, updateEntry, deleteCurrentEntryFromStore, selectMonth } = entriesSlice.actions\n\nexport default entriesSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    isLogged: false,\n    token: null\n}\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        login: (state, action) => {\n            state.isLogged = true\n            state.token = action.payload\n        },\n        logout: state => initialState\n    }\n})\n\nexport const { login, logout } = authSlice.actions\n\nexport default authSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    primaryFeelings: []\r\n}\r\n\r\nconst feelingsSlice = createSlice({\r\n    name: 'feelings',\r\n    initialState,\r\n    reducers: {\r\n        fetchedPrimaryFeelings: (state, action) => { state.primaryFeelings = action.payload }\r\n    }\r\n})\r\n\r\nexport const { fetchedPrimaryFeelings } = feelingsSlice.actions\r\n\r\nexport default feelingsSlice.reducer","import { combineReducers } from 'redux'\nimport authReducer from './slices/authSlice'\nimport uiReducer from './slices/uiSlice'\nimport entriesReducer from './slices/entriesSlice'\nimport feelingsReducer from './slices/feelingsSlice'\n\nexport default combineReducers({\n    auth: authReducer,\n    ui: uiReducer,\n    entries: entriesReducer,\n    feelings: feelingsReducer\n})","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    firstName: '',\n    lastName: ''\n}\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        fetchedUserInfo: (state, action) => {state = action.payload}\n    }\n})\n\nexport const { fetchedUserInfo } = userSlice.actions\n\nexport default userSlice.reducer","import { loadingUi, stopLoadingUi } from '../slices/uiSlice'\r\nimport {fetchedPrimaryFeelings} from '../slices/feelingsSlice'\r\nimport axios from 'axios'\r\n\r\n/**\r\n * Fetch all primary feelings\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const getPrimaryFeelings = () => async dispatch => {\r\n    dispatch(loadingUi())\r\n\r\n    try {\r\n        const feelings = await axios.get('/feelings/primary')\r\n          .then(response => {\r\n              return response.data\r\n          })\r\n        dispatch(fetchedPrimaryFeelings(feelings))\r\n        dispatch(stopLoadingUi())\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}","import axios from 'axios'\r\nimport { login, logout } from '../slices/authSlice'\r\nimport { loadingUi, stopLoadingUi } from '../slices/uiSlice'\r\nimport { fetchedUserInfo } from '../slices/userSlice'\r\nimport { emptyEntries } from '../slices/entriesSlice'\r\nimport { fetchAllEntries } from './entriesService'\r\nimport { getPrimaryFeelings } from './feelingsService'\r\n\r\n/**\r\n * Try to log in user and save axios headers\r\n * @param credentials\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const loginUser = (credentials, history) => async dispatch => {\r\n    dispatch(loadingUi())\r\n    try {\r\n        const data = await axios.post('/login', credentials)\r\n          .then(response => response.data)\r\n        const FBIdToken = `Bearer ${data.token}`\r\n\r\n        axios.defaults.headers['Authorization'] = FBIdToken\r\n        dispatch(login(FBIdToken))\r\n        dispatch(fetchAllEntries())\r\n        dispatch(getPrimaryFeelings())\r\n        history.push('/')\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Logout user and delete axios headers\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const logoutUser = () => dispatch => {\r\n    dispatch(emptyEntries())\r\n    dispatch(logout())\r\n    delete axios.defaults.headers['Authorization']\r\n}\r\n\r\nexport const fetchUserInfo = uid => dipatch => {\r\n    axios.get(`/user/${uid}`)\r\n      .then(response => dipatch(fetchedUserInfo(response.data)))\r\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { logger } from 'redux-logger'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport rootReducer from './reducer'\r\nimport jwtDecode from 'jwt-decode'\r\nimport axios from 'axios'\r\nimport { fetchAllEntries } from './services/entriesService'\r\nimport { logoutUser } from './services/authServices'\r\nimport { getPrimaryFeelings } from './services/feelingsService'\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: false,\r\n    }),\r\n    logger\r\n]\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware\r\n})\r\n\r\nconst persistore = persistStore(store, null, () => {\r\n    const token = store.getState().auth.token\r\n    if (token) {\r\n        const decodedToken = jwtDecode(token)\r\n        if (decodedToken.exp * 1000 < Date.now()) {\r\n            store.dispatch(logoutUser())\r\n        } else {\r\n            axios.defaults.headers['Authorization'] = token\r\n            store.dispatch(fetchAllEntries())\r\n            store.dispatch(getPrimaryFeelings())\r\n        }\r\n    }\r\n})\r\n\r\nexport default store\r\nexport { persistore }\r\n\r\n","import { loadingUi, stopLoadingUi } from '../slices/uiSlice'\r\nimport { addNewEntry, deleteCurrentEntryFromStore, selectMonth } from '../slices/entriesSlice'\r\nimport axios from 'axios'\r\nimport { fetchedAllEntries } from '../slices/entriesSlice'\r\nimport store from '../store'\r\n\r\n/**\r\n * Post a new entry\r\n * @param entry\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const postNewEntry = (entry, updating) => async dispatch => {\r\n    dispatch(loadingUi())\r\n    try {\r\n        await axios.post('/entry', entry)\r\n            .then(response => response.data)\r\n\r\n        //todo: refacto\r\n        const feeling = store.getState().feelings.primaryFeelings.find(feeling => feeling.feelingId === entry.feelingId)\r\n        entry.feeling = feeling\r\n\r\n        if (updating) dispatch(deleteCurrentEntryFromStore())\r\n\r\n        dispatch(addNewEntry(entry))\r\n        dispatch(stopLoadingUi())\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Fetch all entries of the user\r\n * @returns {function(...[*]=)}\r\n */\r\nexport const fetchAllEntries = () => async dispatch => {\r\n    dispatch(loadingUi())\r\n    try {\r\n        const entries = await axios.get('/entries')\r\n            .then(response => response.data)\r\n        dispatch(fetchedAllEntries(entries))\r\n        dispatch(stopLoadingUi())\r\n    } catch (e) {\r\n        dispatch(stopLoadingUi())\r\n        return Promise.reject(e)\r\n    }\r\n}\r\n\r\n/**\r\n * Select month to filter entries for statistics\r\n */\r\nexport const selectMonthForStatistics = month => dispatch => dispatch(selectMonth(month))","import React, { useEffect, useState, useCallback } from 'react'\r\nimport { postNewEntry } from '../../redux/services/entriesService'\r\nimport { connect } from 'react-redux'\r\nimport { selectCurrentEntry } from '../../redux/slices/entriesSlice'\r\nimport moment from 'moment'\r\n// Material UI\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { DatePicker } from '@material-ui/pickers'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n\r\nimport * as Moods from '../../Assets/mood-icons'\r\n\r\n\r\nconst HomePage = ({ isLoading, postNewEntry, primaryFeelings, entries, selectCurrentEntry, currentEntry }) => {\r\n\r\n    const [selectedDate, setSelectedDate] = useState(moment())\r\n    const [newEntry, setNewEntry] = useState({ feelingId: '', entryDate: '' })\r\n    const [choosingMood, setChoosingMood] = useState(true)\r\n    const [updating, setUpdating] = useState(false)\r\n    const [isToday, setIsToday] = useState(true)\r\n\r\n    const colors = {\r\n        angry: '#FF595E',\r\n        neutral: '#8AC926',\r\n        happy: '#FFCA3A',\r\n        sad: '#1982C4',\r\n        fear: '#6A4C93'\r\n    }\r\n\r\n    const changeBackgroundColor = color => {\r\n        document.getElementsByTagName('html')[0].style.backgroundColor = color\r\n    }\r\n\r\n    const changeSelectedEntry = useCallback(() => {\r\n        const entryDate = selectedDate.toISOString().split('T')[0]\r\n        const selectedEntry = entries.find(entry => entry.entryDate.split('T')[0] === entryDate)\r\n        selectedEntry ? setChoosingMood(false) : setChoosingMood(true)\r\n        selectCurrentEntry(selectedEntry)\r\n        setUpdating(false)\r\n        selectedEntry && changeBackgroundColor(colors[selectedEntry.feeling.feelingName.toLowerCase()])\r\n    }, [entries, selectCurrentEntry, selectedDate])\r\n\r\n    useEffect(() => {\r\n        changeSelectedEntry()\r\n        return () => {\r\n            changeBackgroundColor('#fff')\r\n        }\r\n    }, [selectedDate, changeSelectedEntry])\r\n\r\n    const handleDateChange = date => {\r\n        setSelectedDate(date)\r\n        setIsToday(date.isSame(moment(), 'day'))\r\n    }\r\n\r\n    const handleButtonClick = ({ currentTarget }) => {\r\n        // Not using setState because it's not immediate so it doesn't send the correct data\r\n        newEntry.feelingId = currentTarget.value\r\n        newEntry.entryDate = selectedDate.toISOString()\r\n\r\n        postNewEntry(newEntry, updating)\r\n        setNewEntry({ feelingId: '', entryDate: '' })\r\n    }\r\n\r\n    const handleUpdateButtonClick = () => {\r\n        setUpdating(!updating)\r\n        changeBackgroundColor('#fff')\r\n        !updating ? changeBackgroundColor('#fff') : changeBackgroundColor(colors[currentEntry.feeling.feelingName.toLowerCase()])\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth='sm' className='mui-container'>\r\n\r\n            <div className='homepage--header'>\r\n                <Typography variant={'body1'} align='center'>{isToday ? 'How are you feeling today?' : 'How were you feeling?'}</Typography>\r\n                <div className=\"monthPicker\">\r\n                    <IconButton onClick={() => handleDateChange(moment(selectedDate).subtract(1, 'day'))}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                    <DatePicker\r\n                        showTodayButton\r\n                        autoOk\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-dialog\"\r\n                        format=\"MM/DD/yyyy\"\r\n                        disableFuture\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change mood date',\r\n                        }}\r\n                    />\r\n                    <IconButton disabled={isToday} onClick={() => handleDateChange(moment(selectedDate).add(1, 'days'))}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='moods-button-container'>\r\n                {!isLoading ? <div>\r\n                    {choosingMood || updating ? (primaryFeelings ? primaryFeelings.map(feeling => <div className='mood-container'>\r\n                        <img src={Moods[feeling.feelingName]} alt={feeling.feelingName}\r\n                            className={`mood-container__icon moods--${feeling.feelingName}`} />\r\n                        <Button\r\n                            onClick={handleButtonClick}\r\n                            key={feeling.feelingId}\r\n                            value={feeling.feelingId}\r\n                            variant='contained'\r\n                            color='primary'>\r\n                            {feeling.feelingName}\r\n                        </Button>\r\n                    </div>)\r\n                        : <CircularProgress />)\r\n                        : <div className={`display-mood mood--${currentEntry.feeling.feelingName}`}>\r\n                            <img src={Moods[currentEntry.feeling.feelingName]} alt={currentEntry.feeling.feelingName}\r\n                                className={`display-mood__icon moods--darkgrey`} />\r\n                            <Typography>{currentEntry.feeling.feelingName}</Typography>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                    : <CircularProgress />\r\n                }\r\n            </div>\r\n            <div className=\"homepage--footer\">\r\n                {!choosingMood && <IconButton onClick={handleUpdateButtonClick}>\r\n                    {updating ? <ClearIcon /> : <CreateIcon />}\r\n                </IconButton>}\r\n            </div>\r\n        </Container >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: state.ui.isLoading,\r\n    primaryFeelings: state.feelings.primaryFeelings,\r\n    currentEntry: state.entries.currentEntry,\r\n    entries: state.entries.entries\r\n})\r\n\r\nexport default connect(mapStateToProps, { postNewEntry, selectCurrentEntry })(HomePage)","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { loginUser } from '../../redux/services/authServices'\nimport { Happy } from '../../Assets/mood-icons/index'\n//Material UI\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport DraftsIcon from '@material-ui/icons/Drafts'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport LockIcon from '@material-ui/icons/Lock'\n\nconst LoginPage = ({ history, loginUser, isLoading }) => {\n\n    const [credentials, setCredentials] = useState({ email: '', password: '' })\n    const [errors, setErrors] = useState({})\n\n    const handleChange = ({ currentTarget }) => {\n        const { name, value } = currentTarget\n        setCredentials({ ...credentials, [name]: value })\n    }\n    const handleSubmit = async event => {\n        event.preventDefault()\n\n        try {\n            await loginUser(credentials, history)\n        } catch (e) {\n            setErrors(e.response.data)\n        }\n    }\n\n    return (\n        <Grid container maxWidth='sm'>\n            <div className='formContainer'>\n                <img src={Happy} />\n                <Typography variant='h4' component='h1'>Welcome back!</Typography>\n\n                <form className='form' onSubmit={handleSubmit} noValidate>\n                    <TextField id=\"email\" name='email' label=\"Email\" type='email' onChange={handleChange}\n                        value={credentials.email} fullWidth className='textField'\n                        helperText={errors.email} error={!!errors.email}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <DraftsIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"password\" name='password' label=\"Password\" type='password' onChange={handleChange}\n                        value={credentials.password} fullWidth className='textField'\n                        helperText={errors.password} error={!!errors.password}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <LockIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {errors.general &&\n                        <Typography variant='body2' className='customError'>{errors.general}</Typography>}\n                    <Button type='submit' variant=\"contained\" color=\"primary\" className='button'\n                        disabled={isLoading}>\n                        Login\n                      {isLoading && <CircularProgress size={30} className='progress' />}\n                    </Button>\n                </form>\n                <Button className='button' component={Link} to={'/signup'} variant='text'>Don't have an account ? Sign up here</Button>\n            </div>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isLoading: state.ui.isLoading\n})\n\nexport default connect(mapStateToProps, { loginUser })(LoginPage)","import React from 'react'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logoutUser } from '../redux/services/authServices'\r\n// Material UI\r\nimport ExitToApp from '@material-ui/icons/ExitToApp'\r\nimport BarChartIcon from '@material-ui/icons/BarChart'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport MoodIcon from '@material-ui/icons/Mood'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nconst Navbar = ({ isLogged, logoutUser, hasCurrentEntry }) => {\r\n\r\n    const handleLogout = () => logoutUser()\r\n\r\n    const isHomePage = useRouteMatch({\r\n        path: '/',\r\n        exact: true\r\n    })\r\n\r\n    return (\r\n        isLogged && <AppBar position=\"fixed\" className='navbar' color='default'>\r\n            <Toolbar className='toolbar'>\r\n                <IconButton edge='start' component={Link} to='/statistics'>\r\n                    <BarChartIcon />\r\n                </IconButton>\r\n                <Fab aria-label=\"add\" color='primary' style={{\r\n                    position: 'absolute',\r\n                    zIndex: 1,\r\n                    top: -30,\r\n                    left: 0,\r\n                    right: 0,\r\n                    margin: '0 auto',\r\n                }} component={Link} to='/'>\r\n                    {isHomePage && hasCurrentEntry ? <AddIcon style={{ color: 'white' }} /> : <MoodIcon style={{ color: 'white' }} />}\r\n                </Fab>\r\n                <IconButton edge='center' onClick={handleLogout}>\r\n                    <ExitToApp />\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLogged: state.auth.isLogged,\r\n    hasCurrentEntry: state.entries.currentEntry\r\n})\r\n\r\nexport default connect(mapStateToProps, { logoutUser })(Navbar)","import React, { useState } from 'react'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { loadingUi, stopLoadingUi } from '../../redux/slices/uiSlice'\nimport { Link } from 'react-router-dom'\nimport { Happy } from '../../Assets/mood-icons/index'\n\n//Material UI\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\nimport DraftsIcon from '@material-ui/icons/Drafts'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport LockIcon from '@material-ui/icons/Lock'\n\nconst SignupPage = ({ history, isLoading, dispatch }) => {\n\n    const [errors, setErrors] = useState({})\n    const [newUser, setNewUser] = useState({ email: '', password: '', confirmPassword: '', firstName: '' })\n\n    const handleChange = ({ currentTarget }) => {\n        const { name, value } = currentTarget\n        setNewUser({ ...newUser, [name]: value })\n    }\n    const handleSubmit = event => {\n        event.preventDefault()\n        dispatch(loadingUi())\n\n        axios.post('/signup', newUser)\n            .then(response => {\n                dispatch(stopLoadingUi())\n                history.push('/login')\n            })\n            .catch(errors => {\n                setNewUser({ ...newUser, password: '', confirmPassword: '' })\n                setErrors(errors.response.data)\n                dispatch(stopLoadingUi())\n            })\n    }\n\n    return (\n        <Grid container maxWidth='sm'>\n            <div className='formContainer'>\n\n                <img src={Happy} />\n                <Typography variant='h4' component='h1'>Welcome! Sign up here</Typography>\n\n                <form className='form' onSubmit={handleSubmit} noValidate>\n                    <TextField id=\"email\" name='email' label=\"Email\" type='email' onChange={handleChange}\n                        value={newUser.email} fullWidth className='textField'\n                        helperText={errors.email} error={!!errors.email}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <DraftsIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"firstName\" name='firstName' label=\"First name\" type='text' onChange={handleChange}\n                        value={newUser.firstName} fullWidth className='textField'\n                        helperText={errors.firstName} error={!!errors.firstName}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <AccountCircleIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"password\" name='password' label=\"Password\" type='password' onChange={handleChange}\n                        value={newUser.password} fullWidth className='textField'\n                        helperText={errors.password} error={!!errors.password}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <LockIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField id=\"confirmPassword\" name='confirmPassword' label=\"Confirm Password\" type='password'\n                        onChange={handleChange}\n                        value={newUser.confirmPassword} fullWidth className='textField'\n                        helperText={errors.confirmPassword} error={!!errors.confirmPassword}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <LockIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {errors.general &&\n                        <Typography variant='body2' className='customError'>{errors.general}</Typography>}\n                    <Button type='submit' variant=\"contained\" color=\"primary\" className='button'\n                        disabled={isLoading}>\n                        Signup\n                      {isLoading && <CircularProgress size={30} className='progress' />}\n                    </Button>\n                </form>\n                <Button className='button' component={Link} to={'/login'} variant='text'>Already have an account ? Log in here</Button>\n            </div>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = state => ({\n    isLoading: state.ui.isLoading\n})\n\nexport default connect(mapStateToProps, null)(SignupPage)","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nconst PrivateRoute = ({ isLogged, path, component }) => isLogged ? <Route path={path} component={component}/> :\n  <Redirect to={'/login'}/>\n\nconst mapStateToProps = state => ({\n    isLogged: state.auth.isLogged\n})\n\nexport default connect(mapStateToProps)(PrivateRoute)","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nconst AnonymRoute = ({ isLogged, path, component }) => !isLogged ? <Route path={path} component={component}/> :\n  <Redirect to={'/'}/>\n\nconst mapStateToProps = state => ({\n    isLogged: state.auth.isLogged\n})\n\nexport default connect(mapStateToProps)(AnonymRoute)","export const getYearAndMonthFromISOStringDate = isoStringDate => {\r\n    const date = new Date(isoStringDate)\r\n    return `${date.getFullYear()}-${date.getMonth()}`\r\n}","import { createSelector } from '@reduxjs/toolkit'\r\nimport { getYearAndMonthFromISOStringDate } from '../../utils/utilFunctions'\r\n\r\nconst entriesSelector = state => state.entries.entries\r\nconst selectedMonth = state => getYearAndMonthFromISOStringDate(state.entries.selectedMonth)\r\n\r\nexport const selectedMonthEntriesSelector = createSelector(\r\n    [entriesSelector, selectedMonth],\r\n    (entries, selectedMonth) => entries.filter(entry => getYearAndMonthFromISOStringDate(entry.entryDate) === selectedMonth)\r\n)\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport 'tail.datetime/css/tail.datetime-default-blue.css'\r\n\r\nimport * as Moods from '../Assets/mood-icons'\r\n\r\nconst Calendar = ({ selectedMonth, entries }) => {\r\n\r\n    const [date, setDate] = useState(new Date(selectedMonth))\r\n\r\n    useEffect(() => {\r\n        setDate(selectedMonth)\r\n    }, [selectedMonth])\r\n\r\n    // Check if a day has an existing entry\r\n    const hasEntry = monthDay => {\r\n        let testDate = new Date(date)\r\n        testDate.setDate(monthDay)\r\n        testDate = testDate.toISOString().split('T')[0]\r\n        return entries.find(entry => entry.entryDate.split('T')[0] === testDate)\r\n    }\r\n\r\n    // Return an array with the short name of weekdays\r\n    const weekDayShort = moment.weekdaysShort()\r\n\r\n    // Creates the header of the calendar\r\n    const weekDayShortName = weekDayShort.map(day => <th key={day} className='week-day'>{day}</th>)\r\n\r\n    // Return first day of the month \r\n    const firstDayOfMonth = () => moment(date).startOf(\"month\").format(\"d\")\r\n\r\n    // Creates blanks at the start of the calendar to match the first day of the month \r\n    const blanks = []\r\n    for (let i = 0; i < firstDayOfMonth(); i++) {\r\n        blanks.push(<td key={`empty-${i}`} className='calendar-day empty'>{''}</td>)\r\n    }\r\n\r\n    // Creates the array with the days of the month\r\n    let daysInMonth = []\r\n    for (let d = 1; d <= moment(date).daysInMonth(); d++) {\r\n        let entry = hasEntry(d)\r\n        daysInMonth.push(<td key={d} className='calendar-day'>{entry ? <img\r\n            src={Moods[entry.feeling.feelingName]} alt={entry.feeling.feelingName}\r\n            className={`calendar-mood moods--${entry.feeling.feelingName}`} />\r\n            : d}</td>)\r\n    }\r\n\r\n    // Creates the needed amount of rows in the calendar\r\n    const totalSlots = [...blanks, ...daysInMonth]\r\n    const rows = []\r\n    let cells = []\r\n    totalSlots.forEach((row, i) => {\r\n        if (i % 7 !== 0) {\r\n            cells.push(row) // if index not equal 7 that means not go to next week\r\n        } else {\r\n            rows.push(cells) // when reach next week we contain all td in last week to rows \r\n            cells = [] // empty container \r\n            cells.push(row) // in current loop we still push current row to new container\r\n        }\r\n        if (i === totalSlots.length - 1) { // when end loop we add remain date\r\n            rows.push(cells)\r\n        }\r\n    })\r\n\r\n    // Finally creates the body of the calendar\r\n    daysInMonth = rows.map((d, i) => <tr key={i}>{d}</tr>)\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <table className='calendar'>\r\n                <thead>\r\n                    <tr>\r\n                        {weekDayShortName}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{daysInMonth}</tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar\r\n","import React, { useEffect, useState, useCallback } from 'react'\r\nimport * as Moods from '../Assets/mood-icons'\r\n\r\nconst FeelingsStatsList = ({ primaryFeelings, entries }) => {\r\n\r\n    const [feelings, setFeelings] = useState([])\r\n\r\n    // Count the number of entries for each feeling\r\n    const sortFeelings = useCallback(entries => {\r\n        const feelings = []\r\n        primaryFeelings.forEach(primaryFeeling => {\r\n            let filtered = entries.filter(entry => entry.feeling.feelingId === primaryFeeling.feelingId)\r\n            feelings.push({\r\n                ...primaryFeeling,\r\n                entriesCount: filtered.length\r\n            })\r\n        })\r\n        setFeelings(feelings)\r\n    }, [primaryFeelings])\r\n\r\n    useEffect(() => {\r\n        sortFeelings(entries)\r\n    }, [sortFeelings, entries])\r\n\r\n    return (\r\n        <div className=\"card feelings-list\">\r\n            {feelings.map(feeling => (\r\n                <div className='feelings-list__element' key={feeling.feelingId}>\r\n                    <img src={Moods[feeling.feelingName]} alt={feeling.feelingName}\r\n                        className={`list-mood moods--${feeling.feelingName}`} />\r\n                    <span>{feeling.entriesCount}</span>\r\n                    <span>{Math.round(feeling.entriesCount / entries.length * 100)}%</span>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FeelingsStatsList\r\n","import React from 'react'\r\nimport { DatePicker } from \"@material-ui/pickers\"\r\nimport { connect } from 'react-redux'\r\nimport { selectMonthForStatistics } from '../../redux/services/entriesService'\r\nimport { selectedMonthEntriesSelector } from '../../redux/selectors/entriesSelector'\r\nimport Calendar from '../Calendar'\r\nimport moment from 'moment'\r\n// MUI\r\nimport Container from '@material-ui/core/Container'\r\nimport FeelingsStatsList from '../FeelingsStatsList'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\n\r\nconst StatsPage = ({ selectMonthForStatistics, selectedMonth, entries, primaryFeelings }) => {\r\n\r\n    const handleDateChange = date => selectMonthForStatistics(date)\r\n\r\n    return (\r\n        <Container maxWidth='sm' className='statspage'>\r\n            <div className='monthPicker'>\r\n                <IconButton onClick={() => handleDateChange(moment(selectedMonth).subtract(1, 'month'))}>\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n                <DatePicker\r\n                    autoOk\r\n                    views={[\"month\"]}\r\n                    value={selectedMonth}\r\n                    onChange={handleDateChange}\r\n                    disableFuture\r\n                    format=\"MMMM\"\r\n                />\r\n                <DatePicker\r\n                    autoOk\r\n                    variant=\"inline\"\r\n                    views={[\"year\"]}\r\n                    value={selectedMonth}\r\n                    onChange={handleDateChange}\r\n                    disableFuture\r\n                />\r\n                <IconButton disabled={moment(selectedMonth).isSame(moment(), 'month')} onClick={() => handleDateChange(moment(selectedMonth).add(1, 'month'))}>\r\n                    <ChevronRightIcon />\r\n                </IconButton>\r\n            </div>\r\n            <div className=\"statspage--values\">\r\n                <Calendar selectedMonth={new Date(selectedMonth)} entries={entries} />\r\n                <FeelingsStatsList primaryFeelings={primaryFeelings} entries={entries} />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedMonth: state.entries.selectedMonth,\r\n    entries: selectedMonthEntriesSelector(state),\r\n    primaryFeelings: state.feelings.primaryFeelings\r\n})\r\n\r\nexport default connect(mapStateToProps, { selectMonthForStatistics })(StatsPage)\r\n","import React from 'react'\r\nimport './Assets/SCSS/index.scss'\r\nimport { HashRouter as Router, Switch } from 'react-router-dom'\r\nimport HomePage from './Components/Pages/HomePage'\r\nimport LoginPage from './Components/Pages/LoginPage'\r\nimport Navbar from './Components/Navbar'\r\nimport SignupPage from './Components/Pages/SignupPage'\r\nimport PrivateRoute from './Components/PrivateRoute'\r\nimport AnonymRoute from './Components/AnonymRoute'\r\nimport { persistore } from './redux/store'\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport StatsPage from './Components/Pages/StatsPage'\r\nimport MomentUtils from '@date-io/moment'\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#0096c7'\r\n        }\r\n    }\r\n})\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <PersistGate loading={null} persistor={persistore}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <div className=\"App\">\r\n                            <Router>\r\n                                <div className=\"container\">\r\n                                    <Switch>\r\n                                        <PrivateRoute exact path={'/'} component={HomePage} />\r\n                                        <AnonymRoute exact path={'/login'} component={LoginPage} />\r\n                                        <AnonymRoute exact path={'/signup'} component={SignupPage} />\r\n                                        <PrivateRoute exact path={'/statistics'} component={StatsPage} />\r\n                                    </Switch>\r\n                                </div>\r\n                                <Navbar />\r\n                            </Router>\r\n                        </div>\r\n                    </MuiPickersUtilsProvider>\r\n                </PersistGate>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}